{"interfaceLanguages":{"swift":[{"children":[{"title":"Essentials","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/gettingstarted","title":"Getting Started with the TCTL Parser","type":"article"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/init(language:)","title":"init(language: Language)","type":"init"},{"path":"\/documentation\/tctlparser\/configuration\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/language","title":"let language: Language","type":"property"},{"path":"\/documentation\/tctlparser\/configuration\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/configuration\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/configuration\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/configuration\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/configuration","title":"Configuration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/init(expression:constraints:)","title":"init(expression: GloballyQuantifiedExpression, constraints: [ConstrainedStatement])","type":"init"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/constraints","title":"let constraints: [ConstrainedStatement]","type":"property"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/expression","title":"let expression: GloballyQuantifiedExpression","type":"property"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/constrainedexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/constrainedexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/constrainedexpression","title":"ConstrainedExpression","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/init(configuration:requirements:)","title":"init(configuration: Configuration, requirements: [Expression])","type":"init"},{"path":"\/documentation\/tctlparser\/specification\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/configuration","title":"let configuration: Configuration","type":"property"},{"path":"\/documentation\/tctlparser\/specification\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/tctlparser\/specification\/requirements","title":"let requirements: [Expression]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/specification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/specification\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/specification\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/specification","title":"Specification","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/equal(constraint:)","title":"case equal(constraint: Constraint)","type":"case"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/greaterthan(constraint:)","title":"case greaterThan(constraint: Constraint)","type":"case"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/greaterthanorequal(constraint:)","title":"case greaterThanOrEqual(constraint: Constraint)","type":"case"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/lessthan(constraint:)","title":"case lessThan(constraint: Constraint)","type":"case"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/lessthanorequal(constraint:)","title":"case lessThanOrEqual(constraint: Constraint)","type":"case"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/notequal(constraint:)","title":"case notEqual(constraint: Constraint)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/constrainedstatement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constrainedstatement\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/constrainedstatement\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/constrainedstatement","title":"ConstrainedStatement","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/energy(amount:unit:)","title":"case energy(amount: UInt, unit: EnergyUnit)","type":"case"},{"path":"\/documentation\/tctlparser\/constraint\/time(amount:unit:)","title":"case time(amount: UInt, unit: TimeUnit)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/amount","title":"var amount: UInt","type":"property"},{"path":"\/documentation\/tctlparser\/constraint\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/tctlparser\/constraint\/symbol","title":"var symbol: String","type":"property"},{"path":"\/documentation\/tctlparser\/constraint\/unit","title":"var unit: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/constraint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/constraint\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/constraint\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/constraint","title":"Constraint","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/j","title":"case J","type":"case"},{"path":"\/documentation\/tctlparser\/energyunit\/fj","title":"case fJ","type":"case"},{"path":"\/documentation\/tctlparser\/energyunit\/mj","title":"case mJ","type":"case"},{"path":"\/documentation\/tctlparser\/energyunit\/nj","title":"case nJ","type":"case"},{"path":"\/documentation\/tctlparser\/energyunit\/pj","title":"case pJ","type":"case"},{"path":"\/documentation\/tctlparser\/energyunit\/uj","title":"case uJ","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/energyunit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/energyunit\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/energyunit\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/energyunit","title":"EnergyUnit","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/conjunction(lhs:rhs:)","title":"case conjunction(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/constrained(expression:)","title":"case constrained(expression: ConstrainedExpression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/disjunction(lhs:rhs:)","title":"case disjunction(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/implies(lhs:rhs:)","title":"case implies(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/language(expression:)","title":"case language(expression: LanguageExpression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/not(expression:)","title":"case not(expression: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/precedence(expression:)","title":"case precedence(expression: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/expression\/quantified(expression:)","title":"case quantified(expression: GloballyQuantifiedExpression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/expression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/expression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/expression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/expression","title":"Expression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/always(expression:)","title":"case always(expression: PathQuantifiedExpression)","type":"case"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/eventually(expression:)","title":"case eventually(expression: PathQuantifiedExpression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/init(quantifier:expression:)","title":"init?(quantifier: Character, expression: PathQuantifiedExpression)","type":"init"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/expression","title":"var expression: PathQuantifiedExpression","type":"property"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/globallyquantifiedexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/globallyquantifiedexpression","title":"GloballyQuantifiedExpression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/vhdl","title":"case vhdl","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/language\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/language\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/language\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/language","title":"Language","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/vhdl(expression:)","title":"case vhdl(expression: VHDLExpression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/language","title":"var language: Language","type":"property"},{"path":"\/documentation\/tctlparser\/languageexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/languageexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/languageexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/languageexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/languageexpression","title":"LanguageExpression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/finally(expression:)","title":"case finally(expression: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/globally(expression:)","title":"case globally(expression: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/next(expression:)","title":"case next(expression: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/until(lhs:rhs:)","title":"case until(lhs: Expression, rhs: Expression)","type":"case"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/weak(lhs:rhs:)","title":"case weak(lhs: Expression, rhs: Expression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/init(binaryquantifier:lhs:rhs:)","title":"init?(binaryQuantifier: Character, lhs: Expression, rhs: Expression)","type":"init"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/init(unaryquantifier:expression:)","title":"init?(unaryQuantifier: Character, expression: Expression)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/expression","title":"var expression: Expression?","type":"property"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/lhs","title":"var lhs: Expression?","type":"property"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/rhs","title":"var rhs: Expression?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/pathquantifiedexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/pathquantifiedexpression","title":"PathQuantifiedExpression","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/fs","title":"case fs","type":"case"},{"path":"\/documentation\/tctlparser\/timeunit\/ms","title":"case ms","type":"case"},{"path":"\/documentation\/tctlparser\/timeunit\/ns","title":"case ns","type":"case"},{"path":"\/documentation\/tctlparser\/timeunit\/ps","title":"case ps","type":"case"},{"path":"\/documentation\/tctlparser\/timeunit\/s","title":"case s","type":"case"},{"path":"\/documentation\/tctlparser\/timeunit\/us","title":"case us","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/timeunit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/timeunit\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/timeunit\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/timeunit","title":"TimeUnit","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/boolean(expression:)","title":"case boolean(expression: BooleanExpression)","type":"case"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/conditional(expression:)","title":"case conditional(expression: ConditionalExpression)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/tctlparser\/vhdlexpression\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/tctlparser\/vhdlexpression\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/tctlparser\/vhdlexpression\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/tctlparser\/vhdlexpression","title":"VHDLExpression","type":"enum"}],"path":"\/documentation\/tctlparser","title":"TCTLParser","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}